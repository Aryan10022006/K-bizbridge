{"ast":null,"code":"var _jsxFileName = \"D:\\\\bizbridge-frontend\\\\src\\\\components\\\\protectedroute.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiredRole\n}) => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [authorized, setAuthorized] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem(\"authToken\");\n    const userRole = localStorage.getItem(\"userRole\");\n\n    // Check if there's a token and role match\n    if (token && userRole === requiredRole) {\n      setAuthorized(true);\n      setLoading(false);\n    } else {\n      setLoading(false);\n      navigate(\"/auth\"); // Redirect to auth if not authorized\n    }\n  }, [navigate, requiredRole]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n  return authorized ? children : null;\n};\n_s(ProtectedRoute, \"ndpB+HUmN4QGg8DPYL0RWtEWxpo=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","ProtectedRoute","children","requiredRole","_s","loading","setLoading","authorized","setAuthorized","navigate","token","localStorage","getItem","userRole","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/bizbridge-frontend/src/components/protectedroute.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({ children, requiredRole }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [authorized, setAuthorized] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    const userRole = localStorage.getItem(\"userRole\");\r\n    \r\n    // Check if there's a token and role match\r\n    if (token && userRole === requiredRole) {\r\n      setAuthorized(true);\r\n      setLoading(false);\r\n    } else {\r\n      setLoading(false);\r\n      navigate(\"/auth\"); // Redirect to auth if not authorized\r\n    }\r\n  }, [navigate, requiredRole]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return authorized ? children : null;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMc,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;IAEjD;IACA,IAAIF,KAAK,IAAIG,QAAQ,KAAKV,YAAY,EAAE;MACtCK,aAAa,CAAC,IAAI,CAAC;MACnBF,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,MAAM;MACLA,UAAU,CAAC,KAAK,CAAC;MACjBG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAACA,QAAQ,EAAEN,YAAY,CAAC,CAAC;EAE5B,IAAIE,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAE,QAAA,EAAK;IAAU;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,OAAOV,UAAU,GAAGL,QAAQ,GAAG,IAAI;AACrC,CAAC;AAACE,EAAA,CAxBIH,cAAc;EAAA,QAGDH,WAAW;AAAA;AAAAoB,EAAA,GAHxBjB,cAAc;AA0BpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}