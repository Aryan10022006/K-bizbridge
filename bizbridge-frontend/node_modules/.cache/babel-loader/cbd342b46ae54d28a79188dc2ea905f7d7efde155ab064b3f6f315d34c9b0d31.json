{"ast":null,"code":"var _jsxFileName = \"D:\\\\bizbridge-frontend\\\\src\\\\components\\\\protectedroute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n// This is your protected route that checks if the user is logged in and has the correct role\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  component: Component,\n  requiredRole,\n  ...rest\n}) => {\n  const token = localStorage.getItem(\"authToken\"); // Get the token\n  const userRole = localStorage.getItem(\"userRole\"); // Get the user role from localStorage\n\n  console.log(\"Token:\", token); // Debugging\n  console.log(\"User Role:\", userRole); // Debugging\n  console.log(\"Required Role:\", requiredRole); // Debugging\n\n  // If there is no token or the role doesn't match, redirect to forbidden or login\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/auth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  if (requiredRole && userRole !== requiredRole) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/forbidden\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 46\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Route","Redirect","jsxDEV","_jsxDEV","ProtectedRoute","component","Component","requiredRole","rest","token","localStorage","getItem","userRole","console","log","to","fileName","_jsxFileName","lineNumber","columnNumber","render","props","_c","$RefreshReg$"],"sources":["D:/bizbridge-frontend/src/components/protectedroute.js"],"sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n// This is your protected route that checks if the user is logged in and has the correct role\r\nconst ProtectedRoute = ({ component: Component, requiredRole, ...rest }) => {\r\n  const token = localStorage.getItem(\"authToken\"); // Get the token\r\n  const userRole = localStorage.getItem(\"userRole\"); // Get the user role from localStorage\r\n\r\n  console.log(\"Token:\", token); // Debugging\r\n  console.log(\"User Role:\", userRole); // Debugging\r\n  console.log(\"Required Role:\", requiredRole); // Debugging\r\n\r\n  // If there is no token or the role doesn't match, redirect to forbidden or login\r\n  if (!token) {\r\n    return <Redirect to=\"/auth\" />;\r\n  }\r\n\r\n  if (requiredRole && userRole !== requiredRole) {\r\n    return <Redirect to=\"/forbidden\" />;\r\n  }\r\n\r\n  return <Route {...rest} render={(props) => <Component {...props} />} />;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAEC,YAAY;EAAE,GAAGC;AAAK,CAAC,KAAK;EAC1E,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;EAEnDE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,KAAK,CAAC,CAAC,CAAC;EAC9BI,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAAC,CAAC,CAAC;EACrCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEP,YAAY,CAAC,CAAC,CAAC;;EAE7C;EACA,IAAI,CAACE,KAAK,EAAE;IACV,oBAAON,OAAA,CAACF,QAAQ;MAACc,EAAE,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChC;EAEA,IAAIZ,YAAY,IAAIK,QAAQ,KAAKL,YAAY,EAAE;IAC7C,oBAAOJ,OAAA,CAACF,QAAQ;MAACc,EAAE,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC;EAEA,oBAAOhB,OAAA,CAACH,KAAK;IAAA,GAAKQ,IAAI;IAAEY,MAAM,EAAGC,KAAK,iBAAKlB,OAAA,CAACG,SAAS;MAAA,GAAKe;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzE,CAAC;AAACG,EAAA,GAlBIlB,cAAc;AAoBpB,eAAeA,cAAc;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}