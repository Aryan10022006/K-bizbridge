{"ast":null,"code":"var _jsxFileName = \"D:\\\\bizbridge-frontend\\\\src\\\\components\\\\protectedroute.js\";\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  requiredRole\n}) => {\n  const token = localStorage.getItem('authToken');\n  const userRole = localStorage.getItem('userRole'); // Assuming the role is saved here\n\n  // Log the token and role to debug\n  console.log(\"Token:\", token);\n  console.log(\"User Role:\", userRole);\n  console.log(\"Required Role:\", requiredRole);\n  if (!token) {\n    // If there's no token, redirect to the login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/auth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  }\n  if (userRole !== requiredRole) {\n    // If the user doesn't have the required role, redirect to a \"Forbidden\" page or similar\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/forbidden\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If the token exists and the role matches, render the protected route\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","Outlet","jsxDEV","_jsxDEV","ProtectedRoute","requiredRole","token","localStorage","getItem","userRole","console","log","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/bizbridge-frontend/src/components/protectedroute.js"],"sourcesContent":["import { Navigate, Outlet } from 'react-router-dom';\r\n\r\nconst ProtectedRoute = ({ requiredRole }) => {\r\n  const token = localStorage.getItem('authToken');\r\n  const userRole = localStorage.getItem('userRole');  // Assuming the role is saved here\r\n\r\n  // Log the token and role to debug\r\n  console.log(\"Token:\", token);\r\n  console.log(\"User Role:\", userRole);\r\n  console.log(\"Required Role:\", requiredRole);\r\n\r\n  if (!token) {\r\n    // If there's no token, redirect to the login page\r\n    return <Navigate to=\"/auth\" />;\r\n  }\r\n\r\n  if (userRole !== requiredRole) {\r\n    // If the user doesn't have the required role, redirect to a \"Forbidden\" page or similar\r\n    return <Navigate to=\"/forbidden\" />;\r\n  }\r\n\r\n  // If the token exists and the role matches, render the protected route\r\n  return <Outlet />;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAC3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAE;;EAEpD;EACAE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,KAAK,CAAC;EAC5BI,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAAC;EACnCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,YAAY,CAAC;EAE3C,IAAI,CAACC,KAAK,EAAE;IACV;IACA,oBAAOH,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChC;EAEA,IAAIP,QAAQ,KAAKJ,YAAY,EAAE;IAC7B;IACA,oBAAOF,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC;;EAEA;EACA,oBAAOb,OAAA,CAACF,MAAM;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnB,CAAC;AAACC,EAAA,GArBIb,cAAc;AAuBpB,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}